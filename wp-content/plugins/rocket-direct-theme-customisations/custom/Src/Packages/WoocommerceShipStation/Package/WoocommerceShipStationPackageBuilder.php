<?php
require_once __DIR__ . "/WoocommerceShipStationBoxPackage.php";

class Woocommerce_Shipstation_Packages {
  /**
   * Build common packages into Combined Unit
   * @param $packages packages generated by Woocommerce_Package_Builder
   */
  static function build( $packages ) {
    $limits = self::getLimitsByCategory();
    $boxes = array();
    foreach( $packages as $category => $packages ) {
      $box = null;

      foreach( $packages as $packageKey => $commonPackage ) {
        list( $productId ) = explode( ":", $packageKey );
        $product = wc_get_product( $productId );

        if( $commonPackage->get_quantity() <= 0 ) {
          continue;
        }
        
        if( $commonPackage->get_presentation() === Woocommerce_Package_Builder::CASE_PRESENTATION ) {
          list( $_box, $_boxes ) = self::addPackagesToBox( $commonPackage, $limits[$category], $box );
          $box = $_box;
          $boxes = array_merge( $boxes, $_boxes );
        }

        if( $commonPackage->get_presentation() === Woocommerce_Package_Builder::BOX_PRESENTATION ) {
          $created_boxes = self::createBoxFromBoxes( $product->get_meta('product_shipment_details_id'), $commonPackage->get_quantity(), $commonPackage );

          if( !$created_boxes ) {
            return new WP_Error('invalid-shipment', 'Some items are not available for shipping.');
          }
          $boxes = array_merge( $boxes, $created_boxes );
        }
      }

      if( $box && count( $box->getItems() ) ) {
        $box->close();
        $boxes[] = $box;
      }

    }
    return $boxes;
  }

  /**
   * Create combined unit from boxes
   * @param $id Shipment ID
   * @param $quantity Total of boxes
   * @param $package Common Package
   */
  static function createBoxFromBoxes( $id, $quantity = 1, $package ) {
    $rules = self::getShippingRules();
    $boxes = array();

    if( !isset( $rules[$id]["boxes"] ) || !is_array( $rules[$id]["boxes"] ) ) {
      return null;
    }

    $rules = $rules[$id]["boxes"];
    $remaining_boxes = $quantity;
    ksort($rules);

    while($remaining_boxes > 0) {
      $current_rule = null;
      $current_rule_qty = 0;

      if( isset($rules[ strval($remaining_boxes)]) ) {
        $boxes[] = array_merge(
          $rules[ strval($remaining_boxes)],
          array("total" => $remaining_boxes * $package->get_price())
        );
        $remaining_boxes = 0;
      } else {
        foreach( $rules as $qty => $rule ) {
          if( $qty <= $remaining_boxes || !$current_rule) {
            $current_rule = $rule;
            $current_rule_qty = $qty;
          } else {
            break;
          }
        }
        $boxes[] = array_merge(
          $current_rule,
          array("total" => $current_rule_qty * $package->get_price())
        );
        $remaining_boxes -= ($current_rule_qty ? $current_rule_qty : 1);
      }
    }
    return self::formatBoxes( $boxes, $package );
  }

  /**
   * Convert Combined units array to Common_Shipping_Package
   * @param $boxes combined units
   * @param $package Common package 
   */
  static function formatBoxes( $boxes, Common_Shipping_Package $package ) {
    return array_map( function( $box ) use ($package) {
      return ShipStation_Box_Package::create_from_package(
        new Common_Shipping_Package(
          array(
            "id" => $package->get_id(),
            "weight" => $box["weight"],
            "length" => $box["length"],
            "width" => $box["width"],
            "height" => $box["height"],
            "class" => $package->get_class(),
            "cases_per_pallet" => $package->get_cases_per_pallet(),
            "max_cases" => $package->get_max_cases(),
            "max_pallets" => $package->get_max_pallets(),
            "price" => $box["total"],
            "quantity" => 1
          )
        ));
    }, $boxes );
  }

  /**
   * Add package items to a box
   */
  static function addPackagesToBox( $package, $limits, $box ) {
    $boxes = array();

    if( !$box ) {
      $box = self::buildBox( $limits );
    }
    
    $quantity = $package->get_quantity();
    $package->set_quantity(1);

    for( $i = 0; $i < $quantity; $i++ ) {
      if( $box->addItem( $package ) ) continue;      
      $box->close();
      $boxes[] = $box;
      $box = self::buildBox( $limits );

      if( $box->addItem( $package ) ) continue;
      $boxes[] = ShipStation_Box_Package::create_from_package( $package );
    }

    return array( $box, array_filter($boxes, function($box) {
      return count($box->getItems()) > 0;
    }));
  }

  /**
   * Built a shipstation box
   */
  static function buildBox( $limits ) {
    return new ShipStation_Box_Package( $limits["dimensions"], $limits["weight"], $limits["direction"] );
  }

  static function getPackagesByCategory( $packages ) {
    $categories = [];
    foreach ($packages as $key => $package) {
      list( $cat, $id ) = explode( ":", $key );
      if( ! is_array( $categories[ $cat ] ) ) {
        $categories[ $cat ] = array();
      }
      $categories[ $cat ][] = array( $id, $package );
    }
    return $categories;
  }

  /**
   * Get combined units limits
   */
  static function getLimitsByCategory() {
    return array(
      "glove" => array(
        "dimensions" => __vector_3D( 18, 22, 22 ),
        "weight" => 36,
        "direction" => "x",
      ),
      "glove-kingfa" => array(
        "dimensions" => __vector_3D( 22, 18, 22 ),
        "weight" => 36,
        "direction" => "y",
      ),
      "mask" => array(
        "dimensions" => __vector_3D( 21, 15, 16 ),
        "weight" => 36,
        "direction" => "x",
      )
    );
  }

  /**
   * Shipping rules for boxes
   */
  static function getShippingRules() {
    return array(
      "3ply-lvl3-510k" => array(
        "boxes" => array(
          "10" => self::formatShippingRule( 12, 12, 12, 5 ),
          "20" => self::formatShippingRule( 12, 12, 12, 10 ),
          "30" => self::formatShippingRule( 21, 15, 12, 15 ),
          "40" => self::formatShippingRule( 21, 15, 14, 20 ),
          "50" => self::formatShippingRule( 21, 15, 16, 26 ),
        )
      )
    );
  }

  /**
   * Format a shipping rule
   */
  static function formatShippingRule( $length, $width, $height, $weight ) {
    return array_merge(
      __vector_3D( $length, $width, $height ),
      array(
        "weight" => $weight
      )
    );
  }
}